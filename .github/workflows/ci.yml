name: CI - Build, Test, Secure, and Push
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build_test_secure:
    name: Build, Test, and Security Scan
    runs-on: ubuntu-latest
    # Grant permissions only for jobs that need them
    permissions:
      contents: read
      packages: write # Required to push to GHCR
      id-token: write # Required for keyless signing (Cosign)
      security-events: write # Required to upload SARIF results

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
      # Use a test database for the CI environment
      DATABASE_URL: "postgresql+psycopg://testuser:testpass@localhost:5432/testdb"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run tests with pytest
        run: pytest -q

      # SCA - Software Composition Analysis with pip-audit
      - name: Scan dependencies for vulnerabilities
        uses: pypa/gh-action-pip-audit@v1

      # SBOM - Generate Software Bill of Materials
      - name: Generate SBOM (CycloneDX)
        run: |
          pip install cyclonedx-bom
          cyclonedx-py --format json -o sbom.json

      # These steps should only run on push to the main branch, not on PRs from forks
      - name: Set up Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          provenance: false # SLSA Provenance is generated in a later step

      # IAST - Image Vulnerability Scanning with Trivy
      - name: Scan container image with Trivy
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # SIGN - Sign the container image using Cosign
      - name: Install Cosign
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: sigstore/cosign-installer@v3

      - name: Sign the container image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: cosign sign --yes ${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

      # ATTEST - Create SLSA build provenance attestation
      - name: Attest build provenance
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: '${{ env.IMAGE_NAME }}'
          subject-digest: '${{ steps.build-and-push.outputs.digest }}'
          push-to-registry: true

      # Upload SBOM artifact
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.json